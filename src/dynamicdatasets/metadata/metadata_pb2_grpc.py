# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import dynamicdatasets.metadata.metadata_pb2 as metadata__pb2


class MetadataStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddMetadata = channel.unary_unary(
            '/metadata.Metadata/AddMetadata',
            request_serializer=metadata__pb2.AddMetadataRequest.SerializeToString,
            response_deserializer=metadata__pb2.AddMetadataResponse.FromString,
        )
        self.GetNext = channel.unary_unary(
            '/metadata.Metadata/GetNext',
            request_serializer=metadata__pb2.GetNextRequest.SerializeToString,
            response_deserializer=metadata__pb2.GetNextResponse.FromString,
        )
        self.AddTrainingData = channel.unary_unary(
            '/metadata.Metadata/AddTrainingData',
            request_serializer=metadata__pb2.AddTrainingDataRequest.SerializeToString,
            response_deserializer=metadata__pb2.AddTrainingDataResponse.FromString,
        )


class MetadataServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddMetadata(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNext(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddTrainingData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MetadataServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'AddMetadata': grpc.unary_unary_rpc_method_handler(
            servicer.AddMetadata,
            request_deserializer=metadata__pb2.AddMetadataRequest.FromString,
            response_serializer=metadata__pb2.AddMetadataResponse.SerializeToString,
        ),
        'GetNext': grpc.unary_unary_rpc_method_handler(
            servicer.GetNext,
            request_deserializer=metadata__pb2.GetNextRequest.FromString,
            response_serializer=metadata__pb2.GetNextResponse.SerializeToString,
        ),
        'AddTrainingData': grpc.unary_unary_rpc_method_handler(
            servicer.AddTrainingData,
            request_deserializer=metadata__pb2.AddTrainingDataRequest.FromString,
            response_serializer=metadata__pb2.AddTrainingDataResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'metadata.Metadata', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))

 # This class is part of an EXPERIMENTAL API.


class Metadata(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddMetadata(request,
                    target,
                    options=(),
                    channel_credentials=None,
                    call_credentials=None,
                    insecure=False,
                    compression=None,
                    wait_for_ready=None,
                    timeout=None,
                    metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/metadata.Metadata/AddMetadata',
            metadata__pb2.AddMetadataRequest.SerializeToString,
            metadata__pb2.AddMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata)

    @staticmethod
    def GetNext(request,
                target,
                options=(),
                channel_credentials=None,
                call_credentials=None,
                insecure=False,
                compression=None,
                wait_for_ready=None,
                timeout=None,
                metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/metadata.Metadata/GetNext',
            metadata__pb2.GetNextRequest.SerializeToString,
            metadata__pb2.GetNextResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata)

    @staticmethod
    def AddTrainingData(request,
                        target,
                        options=(),
                        channel_credentials=None,
                        call_credentials=None,
                        insecure=False,
                        compression=None,
                        wait_for_ready=None,
                        timeout=None,
                        metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/metadata.Metadata/AddTrainingData',
            metadata__pb2.AddTrainingDataRequest.SerializeToString,
            metadata__pb2.AddTrainingDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata)
